version: '3.4'

services:

  sender_1:
    hostname: "sender_1"
    image: "tomitribe-support/spring-activemq-demo-producer:0.0.1-SNAPSHOT"
    ports:
     - "8080:8080"
     - "8000:8000"
    networks:
      - testnwk
    depends_on:
      - amq1
    environment:
      WAIT_FOR: "amq1:8161"
      CATALINA_OPTS: "-Xms128m -Xmx512m -Damq='tcp://amq1:61616'"
    # Uncomment the line below to remote debug on port 8000
    #command: ["jpda", "run"]

  receiver_1:
    hostname: "receiver_1"
    image: "tomitribe-support/spring-activemq-demo-consumer:0.0.1-SNAPSHOT"
    ports:
     - "8081:8080"
     - "8001:8000"
    networks:
      - testnwk
    depends_on:
      - amq1
    environment:
      WAIT_FOR: "amq1:8161"
      CATALINA_OPTS: "-Xms128m -Xmx512m -Damq='tcp://amq1:61616'"
    # Uncomment the line below to remote debug on port 8001
    #command: ["jpda", "run"]

  receiver_2:
    hostname: "receiver_2"
    image: "tomitribe-support/spring-activemq-demo-ruby-runner:0.0.1-SNAPSHOT"
    depends_on:
      - amq1
    networks:
      - testnwk
    environment:
      WAIT_FOR: "amq1:8161"
      SCRIPT: |
        require 'rubygems'
        require 'stomp'

        stomp_params = {
            :hosts => [
                {:host => "amq1", :port => 61613}
            ]
        }

        p "Executing ruby AMQ client..."

        client = Stomp::Connection.new(stomp_params)
        client.subscribe("/queue/logsQueueB", {:ack => 'client'})

        loop do
          msg = client.receive
          unless msg.nil?
            begin
                client.ack(msg.headers["message-id"])
              rescue
                p "Not able to acknowledge this message due to error"
              end
          end
        end

  amq1:
    hostname: "amq1"
    image: "tomitribe-support/spring-activemq-demo-amq:0.0.1-SNAPSHOT"
    networks:
      - testnwk
    ports:
      - 8161:8161
    environment:
      ACTIVEMQ_OPTS: "-Xms64M -Xmx4G"
      AMQ_XML: |
        <!--
            Licensed to the Apache Software Foundation (ASF) under one or more
            contributor license agreements.  See the NOTICE file distributed with
            this work for additional information regarding copyright ownership.
            The ASF licenses this file to You under the Apache License, Version 2.0
            (the "License"); you may not use this file except in compliance with
            the License.  You may obtain a copy of the License at

            http://www.apache.org/licenses/LICENSE-2.0

            Unless required by applicable law or agreed to in writing, software
            distributed under the License is distributed on an "AS IS" BASIS,
            WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
            See the License for the specific language governing permissions and
            limitations under the License.
        -->
        <!-- START SNIPPET: example -->
        <beans
          xmlns="http://www.springframework.org/schema/beans"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">

            <!-- Allows us to use system properties as variables in this configuration file -->
            <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
                <property name="locations">
                    <value>file:$${activemq.conf}/credentials.properties</value>
                </property>
            </bean>

           <!-- Allows accessing the server log -->
            <bean id="logQuery" class="io.fabric8.insight.log.log4j.Log4jLogQuery"
                  lazy-init="false" scope="singleton"
                  init-method="start" destroy-method="stop">
            </bean>

            <!--
                The <broker> element is used to configure the ActiveMQ broker.
            -->
            <broker xmlns="http://activemq.apache.org/schema/core" brokerName="localhost" dataDirectory="$${activemq.data}">

                <destinationPolicy>
                    <policyMap>
                      <policyEntries>
                        <policyEntry topic=">" >
                            <!-- The constantPendingMessageLimitStrategy is used to prevent
                                 slow topic consumers to block producers and affect other consumers
                                 by limiting the number of messages that are retained
                                 For more information, see:

                                 http://activemq.apache.org/slow-consumer-handling.html

                            -->
                          <pendingMessageLimitStrategy>
                            <constantPendingMessageLimitStrategy limit="1000"/>
                          </pendingMessageLimitStrategy>
                        </policyEntry>
                      </policyEntries>
                    </policyMap>
                </destinationPolicy>


                <!--
                    The managementContext is used to configure how ActiveMQ is exposed in
                    JMX. By default, ActiveMQ uses the MBean server that is started by
                    the JVM. For more information, see:

                    http://activemq.apache.org/jmx.html
                -->
                <managementContext>
                    <managementContext createConnector="false"/>
                </managementContext>

                <!--
                    Configure message persistence for the broker. The default persistence
                    mechanism is the KahaDB store (identified by the kahaDB tag).
                    For more information, see:

                    http://activemq.apache.org/persistence.html
                -->
                <persistenceAdapter>
                    <kahaDB directory="$${activemq.data}/kahadb"/>
                </persistenceAdapter>


                  <!--
                    The systemUsage controls the maximum amount of space the broker will
                    use before disabling caching and/or slowing down producers. For more information, see:
                    http://activemq.apache.org/producer-flow-control.html
                  -->
                  <systemUsage>
                    <systemUsage>
                        <memoryUsage>
                            <memoryUsage percentOfJvmHeap="70" />
                        </memoryUsage>
                        <storeUsage>
                            <storeUsage limit="100 gb"/>
                        </storeUsage>
                        <tempUsage>
                            <tempUsage limit="50 gb"/>
                        </tempUsage>
                    </systemUsage>
                </systemUsage>

                <!--
                    The transport connectors expose ActiveMQ over a given protocol to
                    clients and other brokers. For more information, see:

                    http://activemq.apache.org/configuring-transports.html
                -->
                <transportConnectors>
                    <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
                    <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&amp;wireFormat.maxInactivityDuration=2000"/>
                    <transportConnector name="stomp" uri="stomp://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600&amp;wireFormat.maxInactivityDuration=2000"/>
                </transportConnectors>

                <!-- destroy the spring context on shutdown to stop jetty -->
                <shutdownHooks>
                    <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook" />
                </shutdownHooks>

            </broker>

            <!--
                Enable web consoles, REST and Ajax APIs and demos
                The web consoles requires by default login, you can disable this in the jetty.xml file

                Take a look at $${ACTIVEMQ_HOME}/conf/jetty.xml for more details
            -->
            <import resource="jetty.xml"/>

        </beans>
        <!-- END SNIPPET: example -->

networks:
  testnwk: